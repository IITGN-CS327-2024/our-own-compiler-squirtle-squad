Function,func
Identifier,header
LPar,(
Array,arr
Integer,int
Identifier,sample_arr
RPar,)
Colon,:
Integer,int
LBrace,{
If,if
LPar,(
Length,len
LPar,(
Identifier,sample_arr
RPar,)
Greater,>
Number,0
RPar,)
LBrace,{
Return,return
Identifier,sample_arr
LSQB,[
Number,0
RSQB,]
Semicolon,;
RBrace,}
Else,else
LBrace,{
Return,return
Null,null
Semicolon,;
RBrace,}
RBrace,}
Function,func
Identifier,subarr
LPar,(
Array,arr
Integer,int
Identifier,sample_arr
Comma,,
Integer,int
Identifier,start_index
Comma,,
Integer,int
Identifier,sub_arr_size
RPar,)
Colon,:
Array,arr
Integer,int
LBrace,{
Array,arr
Integer,int
Identifier,sub_Arr
Colon,:
Identifier,sub_arr_size
Semicolon,;
Function,func
Identifier,fill
LPar,(
Integer,int
Identifier,index
RPar,)
Colon,:
Void,void
LBrace,{
Identifier,sub_Arr
Assign,=
Identifier,sample_arr
LSQB,[
Identifier,index
Plus,+
Identifier,start_index
RSQB,]
Semicolon,;
RBrace,}
Variable,var
Integer,int
Identifier,i
Assign,=
Number,0
Semicolon,;
While,while
LPar,(
Identifier,i
Less,<
Identifier,sub_arr_size
RPar,)
LBrace,{
Identifier,fill
LPar,(
Identifier,i
RPar,)
Semicolon,;
Identifier,i
Increment,++
Semicolon,;
RBrace,}
RBrace,}
Function,func
Identifier,substring
LPar,(
String_k,string
Identifier,s
RPar,)
Colon,:
Function,func
LPar,(
Integer,int
Comma,,
Integer,int
RPar,)
Colon,:
String_k,string
LBrace,{
Return,return
Function,func
Identifier,slicing
LPar,(
Integer,int
Identifier,start_index
Comma,,
Integer,int
Identifier,sub_str_size
RPar,)
Colon,:
String_k,string
LBrace,{
Return,return
Slice,slice
LPar,(
Identifier,s
Comma,,
Identifier,start_index
Comma,,
Identifier,start_index
Plus,+
Identifier,sub_str_size
RPar,)
Semicolon,;
RBrace,}
RBrace,}
Function,func
Main,main
LPar,(
RPar,)
Colon,:
Void,void
LBrace,{
TYPE,type
Identifier,MyFunc
Assign,=
Function,func
LPar,(
Integer,int
Comma,,
Integer,int
RPar,)
Colon,:
String_k,string
Semicolon,;
Identifier,MyFunc
Identifier,x
Assign,=
Identifier,substring
LPar,(
String,abcdef
RPar,)
Semicolon,;
Variable,var
String_k,string
Identifier,sub
Assign,=
Identifier,x
LPar,(
Number,1
Comma,,
Number,3
RPar,)
Semicolon,;
RBrace,}
EOF,
